<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="4" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-01-08T14:36:48Z" name="Default suite" finished-at="2020-01-08T14:36:53Z" duration-ms="5293">
    <groups>
    </groups>
    <test started-at="2020-01-08T14:36:48Z" name="Default test" finished-at="2020-01-08T14:36:53Z" duration-ms="5293">
      <class name="com.altimetrik.RussianIP.mainTestClass.CreateEmployee">
        <test-method is-config="true" signature="setupBaseUrl()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:47Z" name="setupBaseUrl" finished-at="2020-01-08T14:36:48Z" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupBaseUrl -->
        <test-method is-config="true" signature="startReport()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:48Z" name="startReport" finished-at="2020-01-08T14:36:48Z" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method is-config="true" signature="testLogger(java.lang.reflect.Method)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:48Z" name="testLogger" finished-at="2020-01-08T14:36:48Z" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.altimetrik.RussianIP.mainTestClass.CreateEmployee.postEmployee()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogger -->
        <test-method signature="postEmployee()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:48Z" name="postEmployee" finished-at="2020-01-08T14:36:50Z" duration-ms="2130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postEmployee -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:50Z" name="getResult" finished-at="2020-01-08T14:36:50Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postEmployee status=SUCCESS method=CreateEmployee.postEmployee()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="testLogger(java.lang.reflect.Method)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:50Z" name="testLogger" finished-at="2020-01-08T14:36:50Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.altimetrik.RussianIP.mainTestClass.CreateEmployee.postEmployeeWithDupRecord()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogger -->
        <test-method signature="postEmployeeWithDupRecord()[pri:1, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:50Z" name="postEmployeeWithDupRecord" finished-at="2020-01-08T14:36:51Z" duration-ms="918" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postEmployeeWithDupRecord -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:51Z" name="getResult" finished-at="2020-01-08T14:36:51Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postEmployeeWithDupRecord status=SUCCESS method=CreateEmployee.postEmployeeWithDupRecord()[pri:1, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="testLogger(java.lang.reflect.Method)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:51Z" name="testLogger" finished-at="2020-01-08T14:36:51Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.altimetrik.RussianIP.mainTestClass.CreateEmployee.getEmployeeDetailsByValidId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogger -->
        <test-method signature="getEmployeeDetailsByValidId()[pri:2, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:51Z" name="getEmployeeDetailsByValidId" finished-at="2020-01-08T14:36:52Z" duration-ms="1023" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getEmployeeDetailsByValidId -->
        <test-method signature="DeleteEmployee()[pri:3, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:52Z" name="DeleteEmployee" finished-at="2020-01-08T14:36:53Z" duration-ms="872" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteEmployee -->
        <test-method is-config="true" signature="testLogger(java.lang.reflect.Method)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:52Z" name="testLogger" finished-at="2020-01-08T14:36:52Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.altimetrik.RussianIP.mainTestClass.CreateEmployee.DeleteEmployee()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogger -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:52Z" name="getResult" finished-at="2020-01-08T14:36:52Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getEmployeeDetailsByValidId status=SUCCESS method=CreateEmployee.getEmployeeDetailsByValidId()[pri:2, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:53Z" name="getResult" finished-at="2020-01-08T14:36:53Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteEmployee status=SUCCESS method=CreateEmployee.DeleteEmployee()[pri:3, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:53Z" name="endReport" finished-at="2020-01-08T14:36:53Z" duration-ms="223" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:com.altimetrik.RussianIP.mainTestClass.CreateEmployee@6b19b79]" started-at="2020-01-08T14:36:53Z" name="afterClass" finished-at="2020-01-08T14:36:53Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- com.altimetrik.RussianIP.mainTestClass.CreateEmployee -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
